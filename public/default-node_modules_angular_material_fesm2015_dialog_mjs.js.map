{"version":3,"file":"default-node_modules_angular_material_fesm2015_dialog_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2015/dialog.mjs"],"sourcesContent":["import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ])),\n        transition('* => void, * => exit', group([\n            animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ])),\n    ]),\n};\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _interactivityChecker, _ngZone, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n        // dialog. If the element inside the dialog can't be focused, then the container is focused\n        // so the user can't tab into other elements behind it.\n        switch (this._config.autoFocus) {\n            case false:\n            case 'dialog':\n                // Ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (!this._containsFocus()) {\n                    element.focus();\n                }\n                break;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this._config.autoFocus);\n                break;\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n}\n_MatDialogContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogContainerBase, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive });\n_MatDialogContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatDialogContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1.FocusMonitor }];\n    }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            if (this._config.delayFocusTrap) {\n                this._trapFocus();\n            }\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    _initializeWithAttachedContent() {\n        super._initializeWithAttachedContent();\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n}\nMatDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\", \"aria-modal\": \"true\" }, listeners: { \"@dialogContainer.start\": \"_onAnimationStart($event)\", \"@dialogContainer.done\": \"_onAnimationDone($event)\" }, properties: { \"id\": \"_id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"@dialogContainer\": \"_state\" }, classAttribute: \"mat-dialog-container\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], directives: [{ type: i3.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDialogAnimations.dialogContainer], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                        'class': 'mat-dialog-container',\n                        'tabindex': '-1',\n                        'aria-modal': 'true',\n                        '[id]': '_id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[@dialogContainer]': '_state',\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, \n    /** Id of the dialog. */\n    id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef\n            .keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._overlayRef.updateSize({ width, height });\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation,\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n                $implicit: config.data,\n                dialogRef,\n            }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef },\n        ];\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatDialogBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatDialogBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: undefined }, { type: undefined }, { type: i1$1.OverlayContainer }, { type: undefined }, { type: i0.Type }, { type: i0.Type }, { type: i0.InjectionToken }, { type: undefined }]; } });\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    }\n}\nMatDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMatDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                        type: Optional\n                    }] }, { type: MatDialogConfig, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DIALOG_SCROLL_STRATEGY]\n                    }] }, { type: MatDialog, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogClose.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogTitle, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-dialog-title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-dialog-title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-dialog-content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-dialog-content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", host: { classAttribute: \"mat-dialog-actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: { 'class': 'mat-dialog-actions' },\n                }]\n        }] });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, declarations: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent], imports: [OverlayModule, PortalModule, MatCommonModule], exports: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule] });\nMatDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogContent,\n                        MatDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogActions,\n                        MatDialogContent,\n                    ],\n                    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n"],"names":["i1$1","Overlay","OverlayConfig","OverlayModule","i3","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","i0","EventEmitter","Directive","Optional","Inject","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injector","TemplateRef","InjectFlags","Injectable","SkipSelf","Input","NgModule","MatCommonModule","Directionality","Subject","defer","of","filter","take","startWith","_getFocusedElementPierceShadowDom","i2","DOCUMENT","trigger","state","style","transition","group","animate","query","animateChild","i1","ESCAPE","hasModifierKey","ANIMATION_MODULE_TYPE","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","delayFocusTrap","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","optional","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_interactivityChecker","_ngZone","_focusMonitor","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_initializeWithAttachedContent","_focusTrap","create","nativeElement","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_trapFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","querySelector","focusInitialElementWhenReady","then","focusedSuccessfully","_focusDialogContainer","_restoreFocus","previousElement","activeElement","body","contains","focusVia","destroy","ɵfac","ElementRef","FocusTrapFactory","ChangeDetectorRef","InteractivityChecker","NgZone","FocusMonitor","ɵdir","type","undefined","decorators","args","static","MatDialogContainer","arguments","_state","_onAnimationDone","toState","totalTime","next","_onAnimationStart","_startExitAnimation","markForCheck","ɵcmp","encapsulation","None","changeDetection","Default","animations","host","template","styles","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","_id","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","close","dialogResult","detachBackdrop","setTimeout","afterOpened","afterClosed","beforeClosed","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","getConfig","positionStrategy","ref","interactionType","result","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_animationMode","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","dialog","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","OverlayContainer","Type","MatDialog","location","defaultOptions","parentDialog","animationMode","Location","ɵprov","Object","assign","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","exportAs","_matDialogClose","MatDialogTitle","_dialogRef","Promise","resolve","container","MatDialogContent","MatDialogActions","classList","MatDialogModule","ɵmod","ɵinj","imports","exports","declarations"],"sourceRoot":"webpack:///"}